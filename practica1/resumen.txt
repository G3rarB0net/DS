ejercicio1:
bicicleta:
import java.util.ArrayList;

public abstract class Bicicleta {
    protected int id;
    private int contBiciletas;

    public Bicicleta( int id) {
        this.id = id;
    }

    public int getId() {
        return id;
    }

    public abstract void showString();

}

bicicletacarretera:
public class BicicletaCarretera extends Bicicleta{
    public BicicletaCarretera(int id) {
        super(id);
    }

    @Override
    public void showString(){
        System.out.println(" Bicicleta de carretera con ID: "+id);
    }
}

bicicletamontaña.
public class BicicletaMontaña extends Bicicleta {
    public BicicletaMontaña( int id) {
        super(id);
    }

    @Override
    public void showString(){
        System.out.println(" Bicicleta de montaña con ID: "+id);
    }
}

carrera:
import javax.swing.*;
import javax.swing.plaf.DimensionUIResource;
import java.util.ArrayList;

public abstract class Carrera extends Thread{
    /**
     * Lista de todas las bicicletas que participaran en la carrera
     */
    protected ArrayList<Bicicleta> bicicletas;

    /**
     * Duración de la carrera en segundos
     */
    protected final int DURACION = 60;

    /**
     * Porcentaje de retiro
     */
    protected double porcentajeRetiro;

    /**
     * Constructor
     */
    public Carrera(int n, double porcentaje) {
        bicicletas = new ArrayList<>(n);
        this.porcentajeRetiro = porcentaje;
    }

    public void addBicicleta(Bicicleta b) {
        bicicletas.add(b);
    }


    public abstract void iniciarCarrera();

    @Override
    public void run() {
        iniciarCarrera();
    }
}

carreracarretera:
import java.util.ArrayList;
import java.util.Random;

public class CarreraCarretera extends Carrera {


    public CarreraCarretera(int n, double porcentaje) {
        super(n, porcentaje);
    }


    @Override
    public void iniciarCarrera() {
        System.out.println("Iniciando carrera carretera");

        //Numero de bicicletas retiradas
        int numeroRetiradas = (int)(bicicletas.size() * porcentajeRetiro);
        System.out.println("Numero de bicicletas a retirar de la carrera de carretera: "+numeroRetiradas);

        //Contador de bicis retiradas
        int contadorRetiradas = 0;
        //Intervalo de tiempo de cada cuanto se retira una bici, si hay menos de 60 bicis a retirar cada 1 segundo
        int intervaloTiempo;
        if(numeroRetiradas > 60){
            intervaloTiempo = (int) (DURACION/numeroRetiradas)*1000;
        }
        else{
            intervaloTiempo = 1000;
        }


        //Guardo el instante de inicio
        long iniTime = System.currentTimeMillis();

        //Mido la diferencia de tiempo, lo divido por 1000 porque es en milisegundos
        while((System.currentTimeMillis()-iniTime)/1000<DURACION) {
            try{
                for(Bicicleta bici : bicicletas){
                    bici.showString();
                }

                Thread.sleep(intervaloTiempo);

                if(contadorRetiradas < numeroRetiradas && !bicicletas.isEmpty()){
                    Random rand = new Random();
                    int indice = rand.nextInt(bicicletas.size());
                    System.out.println("Bicileta con el id " + bicicletas.get(indice).getId() + " se ha retirado de la carrera de Carretera");
                    bicicletas.remove(indice);
                    contadorRetiradas++;
                }

            }catch (InterruptedException e) {
                System.out.println("La carrera de carretera fue interrumpida");
                return;
            }

        }

        System.out.println("La carrera de carretera ha finalizado");
    }


}

carreramontañan:
import java.util.ArrayList;
import java.util.Random;

public class CarreraMontaña extends Carrera {

    public CarreraMontaña(int n, double porcentaje) {
        super(n,porcentaje);

    }


    @Override
    public void iniciarCarrera() {
        System.out.println("Iniciando la carrera de Montaña");

        //Numero de bicicletas retiradas
        int numeroRetiradas = (int)(bicicletas.size() * porcentajeRetiro);
        System.out.println("Numero de bicicletas a retirar de la carrera de montaña: "+numeroRetiradas);

        //Contador de bicis retiradas
        int contadorRetiradas = 0;
        //Intervalo de tiempo de cada cuanto se retira una bici, si hay menos de 60 bicis a retirar cada 1 segundo
        int intervaloTiempo;
        if(numeroRetiradas > 60){
            intervaloTiempo = (int) (DURACION/numeroRetiradas)*1000;
        }
        else{
            intervaloTiempo = 1000;
        }


        //Guardo el instante de inicio
        long iniTime = System.currentTimeMillis();

        //Mido la diferencia de tiempo, lo divido por 1000 porque es en milisegundos
        while((System.currentTimeMillis()-iniTime)/1000<DURACION) {
            try{
                for (Bicicleta bici : bicicletas) {
                    bici.showString();
                }

                Thread.sleep(intervaloTiempo);

                if(contadorRetiradas < numeroRetiradas && !bicicletas.isEmpty()){
                    Random rand = new Random();
                    int indice = rand.nextInt(bicicletas.size());
                    System.out.println("Bicileta con el id " + bicicletas.get(indice).getId() + " se ha retirado de la carrera de Montaña");
                    bicicletas.remove(indice);
                    contadorRetiradas++;
                }

            }catch (InterruptedException e) {
                System.out.println("La carrera de montaña fue interrumpida");
                return;
            }

        }

        System.out.println("La carrera de montaña ha finalizado");
    }


}

factoriacarrerabicileta:
import java.util.ArrayList;

public interface FactoriaCarreraBicicleta {
    public Carrera crearCarrera(int n, double porcentaje);
    public Bicicleta crearBicicleta(int id);
}

factoriacarretera.
import java.util.ArrayList;

public class FactoriaCarretera implements FactoriaCarreraBicicleta{
    @Override
    public BicicletaCarretera crearBicicleta(int id) {
        return new BicicletaCarretera(id);
    }

    @Override
    public CarreraCarretera crearCarrera(int n, double porcentaje){
        return new CarreraCarretera(n, porcentaje);
    }
}

factoriamontañana:
import java.util.ArrayList;

public class FactoriaMontaña implements FactoriaCarreraBicicleta {
    @Override
    public BicicletaMontaña crearBicicleta( int id ) {
        return new BicicletaMontaña(id);
    }

    @Override
    public CarreraMontaña crearCarrera(int n, double porcentaje){
        return new CarreraMontaña(n, porcentaje);
    }
}

main:
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        //Pide el número de bicicletas
        int numBicicletas;

        Scanner sc = new Scanner(System.in);
        System.out.print("Ingrese el numero de bicicletas: ");
        numBicicletas = sc.nextInt();


        //Creacion de las factorias de los dos tipos
        FactoriaCarreraBicicleta factoriaMontaña = new FactoriaMontaña();
        FactoriaCarreraBicicleta factoriaCarretera = new FactoriaCarretera();


        //Creo las carreras
        Carrera carreraMontaña= factoriaMontaña.crearCarrera(numBicicletas,0.2);
        Carrera carreraCarretera = factoriaCarretera.crearCarrera(numBicicletas,0.1);


        //Añado las bicicletas a la carrera
        for (int i = 0; i < numBicicletas; i++) {
            carreraMontaña.addBicicleta(factoriaMontaña.crearBicicleta(i));
            carreraCarretera.addBicicleta(factoriaCarretera.crearBicicleta(i));
        }


        //Inicio las carreras
        carreraMontaña.start();
        carreraCarretera.start();



    }
}

ejercicio2:
main.py:
import json
from llm import BasicLLM
from decorators import TranslationDecorator, ExpansionDecorator

with open('config.json', 'r') as f:
    config = json.load(f)

# Instanciar el LLM base
basic_llm = BasicLLM()

# Generar resumen básico
resumen_basico = basic_llm.generate_summary(
    config['texto'],
    config['input_lang'],
    config['output_lang'],
    config['model_llm']
)

# Traducción del resumen básico
translated_llm = TranslationDecorator(basic_llm, config['model_translation'])
resumen_traducido = translated_llm.generate_summary(
    config['texto'],
    config['input_lang'],
    config['output_lang'],
    config['model_llm']
)

# Ampliación del resumen básico
expanded_llm = ExpansionDecorator(basic_llm, config['model_expansion'])
resumen_ampliado = expanded_llm.generate_summary(
    config['texto'],
    config['input_lang'],
    config['output_lang'],
    config['model_llm']
)

# Combinación: Traducción + Ampliación
combined_llm = ExpansionDecorator(translated_llm, config['model_expansion'])
resumen_combinado = combined_llm.generate_summary(
    config['texto'],
    config['input_lang'],
    config['output_lang'],
    config['model_llm']
)

# Imprimir los resultados
print("\n Resumen básico:", resumen_basico)
print("\n Resumen traducido:", resumen_traducido)
print("\n Resumen ampliado:", resumen_ampliado)
print("\n Resumen combinado (traducido + ampliado):", resumen_combinado)

llm.py:
from abc import ABC, abstractmethod
import requests

#key 1; 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
#key 2; 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
#key 3; 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
class LLM(ABC):
    @abstractmethod
    def generate_summary(self, text, input_lang, output_lang, model):
        pass

class BasicLLM(LLM):
    def generate_summary(self, text, input_lang, output_lang, model):
        API_URL = f"https://api-inference.huggingface.co/models/{model}"
        headers = {"Authorization": "Bearer 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"}
        
        payload = {
            "inputs": text,
            "parameters": {
                "max_length": 130,
                "min_length": 30,
                "do_sample": False
            }
        }
        
        response = requests.post(API_URL, headers=headers, json=payload)
        
        if response.status_code != 200:
            raise Exception(f"Error {response.status_code}: {response.text}")
        try:
            return response.json()[0]['summary_text']
        except (KeyError, IndexError, requests.exceptions.JSONDecodeError):
            raise Exception("Invalid JSON response")

decoratos:

from abc import ABC, abstractmethod
import requests

from llm import LLM

class TranslationDecorator(LLM):
    def __init__(self, llm, translation_model):
        self._llm = llm
        self.translation_model = translation_model

    def generate_summary(self, text, input_lang, output_lang, model):
        translated_text = self._translate(text, input_lang, output_lang)
        return self._llm.generate_summary(translated_text, output_lang, output_lang, model)

    def _translate(self, text, src_lang, tgt_lang):
        API_URL = f"https://api-inference.huggingface.co/models/{self.translation_model}"
        headers = {"Authorization": "Bearer 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"}
        
        payload = {
            "inputs": text,
            "parameters": {
                "src_lang": self._convert_lang(src_lang),
                "tgt_lang": self._convert_lang(tgt_lang)
            }
        }
        
        response = requests.post(API_URL, headers=headers, json=payload)

        if response.status_code != 200:
            raise Exception(f"Error {response.status_code}: {response.text}")
        try:
            return response.json()[0]['translation_text']
        except (KeyError, IndexError, requests.exceptions.JSONDecodeError):
            raise Exception("Invalid JSON response")

    def _convert_lang(self, lang):
        return f"{lang}_Latn" if lang in ["es", "en"] else f"{lang}_Cyrl"
    
        

class ExpansionDecorator(LLM):
    def __init__(self, llm, expansion_model):
        self._llm = llm
        self.expansion_model = expansion_model

    def generate_summary(self, text, input_lang, output_lang, model):
        summary = self._llm.generate_summary(text, input_lang, output_lang, model)
        return self._expand(summary, output_lang)

    def _expand(self, text, target_lang):
        API_URL = f"https://api-inference.huggingface.co/models/{self.expansion_model}"
        headers = {"Authorization": "Bearer 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"}
        
        prompt = f"Expand this summary into a detailed paragraph in its own language: {text}"  # Prompt en inglés
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 200,
                "temperature": 0.7
            }
        }
        
        response = requests.post(API_URL, headers=headers, json=payload)
        
        if response.status_code != 200:
            raise Exception(f"Error {response.status_code}: {response.text}")
        
        try:
            return response.json()[0]['generated_text']
        except (KeyError, IndexError, requests.exceptions.JSONDecodeError):
            raise Exception("Invalid JSON response")
            
 config.json:
{
  "texto": "The Apollo 11 mission landed the first humans on the Moon in 1969...",
  "input_lang": "en",
  "output_lang": "es",
  "model_llm": "facebook/bart-large-cnn",
  "model_translation": "Helsinki-NLP/opus-mt-en-es",
  "model_expansion": "google/flan-t5-base"
}


ejercicio3:
scraping.py:
import requests
import yaml
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import time
from abc import ABC, abstractmethod

# Interfaz del patrón strategy
class ScrapingStrategy(ABC):
    @abstractmethod
    def scrape(self, url):
        pass

# Estrategia con BeautifulSoup
class BeautifulSoupStrategy(ScrapingStrategy):
    def scrape(self, url):
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        quotes = []

        for quote in soup.select(".quote"):
            text = quote.find("span", class_="text").get_text()
            author = quote.find("small", class_="author").get_text()
            tags = [tag.get_text() for tag in quote.find_all("a", class_="tag")]
            
            quotes.append({"text": text, "author": author, "tags": tags})

        return quotes
        
# Estrategia con Selenium
class SeleniumStrategy(ScrapingStrategy):
    def __init__(self):
        options = Options() # Añade las opciones
        options.add_argument("--headless") # Opción: Hace que no se abra el navegador, por tanto el scraping será más rápido
        self.driver = webdriver.Chrome(service=Service("/usr/local/bin/chromedriver"), options=options)

    def scrape(self, url):
        self.driver.get(url) # Abre la url en el navegador
        time.sleep(2) # Espera para que cargue cmpletamente la página

        quotes = []
        elements = self.driver.find_elements(By.CLASS_NAME, "quote") # Busca todos los elementis de la página con la clase "quote"

        for quote in elements:
            text = quote.find_element(By.CLASS_NAME, "text").text
            author = quote.find_element(By.CLASS_NAME, "author").text
            tags = [tag.text for tag in quote.find_elements(By.CLASS_NAME, "tag")]
            quotes.append({"text": text, "author": author, "tags": tags})

        return quotes
    
    def __end__(self):
        self.driver.quit()


class Scraper:
    def __init__(self, strategy: ScrapingStrategy):
        self.strategy = strategy # Recibe como parámetro una estrategia y la almacena en self.strategy

    def get_quotes(self):
        all_quotes = []
        base_url = "https://quotes.toscrape.com/page/{}/" # Define la url base, y en los {} iterará las 5 páginas

        for page in range(1,6): # Itera desde la página 1 hasta la 5
            url = base_url.format(page) # Genera la url de la página actual. Ej: https://quotes.toscrape.com/page/1/
            quotes = self.strategy.scrape(url) # Usa la estratega scrape() para obtener las citas de la página
            all_quotes.extend(quotes) # Añade las quotes obtenidas a la lista de quotes

        return all_quotes
    
# Guardar en YAML
def save_to_yaml(data, filename="quotes.yaml"):         # with ... as file: with cierra el archivo al terminar, y file es la variable que representa el archivo abierto
    with open(filename, "w", encoding="utf-8") as file: # filename es el archivo donde se guarda, w -> modo escritura: borra el contenido si ya existe el archivo
        yaml.dump(data, file, allow_unicode=True) # data son los datos que queremos guardar, y allow_unicode permite guardar caracteres especiales correctamente

# Main
if __name__ == "__main__":
    print("Seleccione la estrategia de scraping:")
    print("1 - BeautifulSoup")
    print("2 - Selenium")

    opcion = input("Ingrese el número de la opción deseada: ").strip()  # .strip elimina los espacios de antes y 
                                                                        # después del número seleccionado para evitar problemas
    if opcion == "1":
        strategy = BeautifulSoupStrategy()
    elif opcion == "2":
        strategy = SeleniumStrategy()
    else:
        print("Opción inválida. Usando BeautifulSoup por defecto.")
        strategy = BeautifulSoupStrategy()

    scraper = Scraper(strategy)

    quotes = scraper.get_quotes()
    save_to_yaml(quotes)

    print(f"Scraping completado. Se guardaron {len(quotes)} citas en 'quotes.yaml'.")


quotes.yaml:
- author: Albert Einstein
  tags:
  - change
  - deep-thoughts
  - thinking
  - world
  text: “The world as we have created it is a process of our thinking. It cannot be
    changed without changing our thinking.”
- author: J.K. Rowling
  tags:
  - abilities
  - choices
  text: “It is our choices, Harry, that show what we truly are, far more than our
    abilities.”
- author: Albert Einstein
  tags:
  - inspirational
  - life
  - live
  - miracle
  - miracles
  text: “There are only two ways to live your life. One is as though nothing is a
    miracle. The other is as though everything is a miracle.”
- author: Jane Austen
  tags:
  - aliteracy
  - books
  - classic
  - humor
  text: “The person, be it gentleman or lady, who has not pleasure in a good novel,
    must be intolerably stupid.”
- author: Marilyn Monroe
  tags:
  - be-yourself
  - inspirational
  text: “Imperfection is beauty, madness is genius and it's better to be absolutely
    ridiculous than absolutely boring.”
- author: Albert Einstein
  tags:
  - adulthood
  - success
  - value
  text: “Try not to become a man of success. Rather become a man of value.”
- author: André Gide
  tags:
  - life
  - love
  text: “It is better to be hated for what you are than to be loved for what you are
    not.”
- author: Thomas A. Edison
  tags:
  - edison
  - failure
  - inspirational
  - paraphrased
  text: “I have not failed. I've just found 10,000 ways that won't work.”
- author: Eleanor Roosevelt
  tags:
  - misattributed-eleanor-roosevelt
  text: “A woman is like a tea bag; you never know how strong it is until it's in
    hot water.”
- author: Steve Martin
  tags:
  - humor
  - obvious
  - simile
  text: “A day without sunshine is like, you know, night.”
- author: Marilyn Monroe
  tags:
  - friends
  - heartbreak
  - inspirational
  - life
  - love
  - sisters
  text: “This life is what you make it. No matter what, you're going to mess up sometimes,
    it's a universal truth. But the good part is you get to decide how you're going
    to mess it up. Girls will be your friends - they'll act like it anyway. But just
    remember, some come, some go. The ones that stay with you through everything -
    they're your true best friends. Don't let go of them. Also remember, sisters make
    the best friends in the world. As for lovers, well, they'll come and go too. And
    baby, I hate to say it, most of them - actually pretty much all of them are going
    to break your heart, but you can't give up because if you give up, you'll never
    find your soulmate. You'll never find that half who makes you whole and that goes
    for everything. Just because you fail once, doesn't mean you're gonna fail at
    everything. Keep trying, hold on, and always, always, always believe in yourself,
    because if you don't, then who will, sweetie? So keep your head high, keep your
    chin up, and most importantly, keep smiling, because life's a beautiful thing
    and there's so much to smile about.”
- author: J.K. Rowling
  tags:
  - courage
  - friends
  text: “It takes a great deal of bravery to stand up to our enemies, but just as
    much to stand up to our friends.”
- author: Albert Einstein
  tags:
  - simplicity
  - understand
  text: “If you can't explain it to a six year old, you don't understand it yourself.”
- author: Bob Marley
  tags:
  - love
  text: “You may not be her first, her last, or her only. She loved before she may
    love again. But if she loves you now, what else matters? She's not perfect—you
    aren't either, and the two of you may never be perfect together but if she can
    make you laugh, cause you to think twice, and admit to being human and making
    mistakes, hold onto her and give her the most you can. She may not be thinking
    about you every second of the day, but she will give you a part of her that she
    knows you can break—her heart. So don't hurt her, don't change her, don't analyze
    and don't expect more than she can give. Smile when she makes you happy, let her
    know when she makes you mad, and miss her when she's not there.”
- author: Dr. Seuss
  tags:
  - fantasy
  text: “I like nonsense, it wakes up the brain cells. Fantasy is a necessary ingredient
    in living.”
- author: Douglas Adams
  tags:
  - life
  - navigation
  text: “I may not have gone where I intended to go, but I think I have ended up where
    I needed to be.”
- author: Elie Wiesel
  tags:
  - activism
  - apathy
  - hate
  - indifference
  - inspirational
  - love
  - opposite
  - philosophy
  text: “The opposite of love is not hate, it's indifference. The opposite of art
    is not ugliness, it's indifference. The opposite of faith is not heresy, it's
    indifference. And the opposite of life is not death, it's indifference.”
- author: Friedrich Nietzsche
  tags:
  - friendship
  - lack-of-friendship
  - lack-of-love
  - love
  - marriage
  - unhappy-marriage
  text: “It is not a lack of love, but a lack of friendship that makes unhappy marriages.”
- author: Mark Twain
  tags:
  - books
  - contentment
  - friends
  - friendship
  - life
  text: '“Good friends, good books, and a sleepy conscience: this is the ideal life.”'
- author: Allen Saunders
  tags:
  - fate
  - life
  - misattributed-john-lennon
  - planning
  - plans
  text: “Life is what happens to us while we are making other plans.”
- author: Pablo Neruda
  tags:
  - love
  - poetry
  text: '“I love you without knowing how, or when, or from where. I love you simply,
    without problems or pride: I love you in this way because I do not know any other
    way of loving but this, in which there is no I or you, so intimate that your hand
    upon my chest is my hand, so intimate that when I fall asleep your eyes close.”'
- author: Ralph Waldo Emerson
  tags:
  - happiness
  text: “For every minute you are angry you lose sixty seconds of happiness.”
- author: Mother Teresa
  tags:
  - attributed-no-source
  text: “If you judge people, you have no time to love them.”
- author: Garrison Keillor
  tags:
  - humor
  - religion
  text: “Anyone who thinks sitting in church can make you a Christian must also think
    that sitting in a garage can make you a car.”
- author: Jim Henson
  tags:
  - humor
  text: “Beauty is in the eye of the beholder and it may be necessary from time to
    time to give a stupid or misinformed beholder a black eye.”
- author: Dr. Seuss
  tags:
  - comedy
  - life
  - yourself
  text: “Today you are You, that is truer than true. There is no one alive who is
    Youer than You.”
- author: Albert Einstein
  tags:
  - children
  - fairy-tales
  text: “If you want your children to be intelligent, read them fairy tales. If you
    want them to be more intelligent, read them more fairy tales.”
- author: J.K. Rowling
  tags: []
  text: “It is impossible to live without failing at something, unless you live so
    cautiously that you might as well not have lived at all - in which case, you fail
    by default.”
- author: Albert Einstein
  tags:
  - imagination
  text: “Logic will get you from A to Z; imagination will get you everywhere.”
- author: Bob Marley
  tags:
  - music
  text: “One good thing about music, when it hits you, you feel no pain.”
- author: Dr. Seuss
  tags:
  - learning
  - reading
  - seuss
  text: “The more that you read, the more things you will know. The more that you
    learn, the more places you'll go.”
- author: J.K. Rowling
  tags:
  - dumbledore
  text: “Of course it is happening inside your head, Harry, but why on earth should
    that mean that it is not real?”
- author: Bob Marley
  tags:
  - friendship
  text: “The truth is, everyone is going to hurt you. You just got to find the ones
    worth suffering for.”
- author: Mother Teresa
  tags:
  - misattributed-to-mother-teresa
  - paraphrased
  text: “Not all of us can do great things. But we can do small things with great
    love.”
- author: J.K. Rowling
  tags:
  - death
  - inspirational
  text: “To the well-organized mind, death is but the next great adventure.”
- author: Charles M. Schulz
  tags:
  - chocolate
  - food
  - humor
  text: “All you need is love. But a little chocolate now and then doesn't hurt.”
- author: William Nicholson
  tags:
  - misattributed-to-c-s-lewis
  - reading
  text: “We read to know we're not alone.”
- author: Albert Einstein
  tags:
  - knowledge
  - learning
  - understanding
  - wisdom
  text: “Any fool can know. The point is to understand.”
- author: Jorge Luis Borges
  tags:
  - books
  - library
  text: “I have always imagined that Paradise will be a kind of library.”
- author: George Eliot
  tags:
  - inspirational
  text: “It is never too late to be what you might have been.”
- author: George R.R. Martin
  tags:
  - read
  - readers
  - reading
  - reading-books
  text: “A reader lives a thousand lives before he dies, said Jojen. The man who never
    reads lives only one.”
- author: C.S. Lewis
  tags:
  - books
  - inspirational
  - reading
  - tea
  text: “You can never get a cup of tea large enough or a book long enough to suit
    me.”
- author: Marilyn Monroe
  tags: []
  text: “You believe lies so you eventually learn to trust no one but yourself.”
- author: Marilyn Monroe
  tags:
  - girls
  - love
  text: “If you can make a woman laugh, you can make her do anything.”
- author: Albert Einstein
  tags:
  - life
  - simile
  text: “Life is like riding a bicycle. To keep your balance, you must keep moving.”
- author: Marilyn Monroe
  tags:
  - love
  text: “The real lover is the man who can thrill you by kissing your forehead or
    smiling into your eyes or just staring into space.”
- author: Marilyn Monroe
  tags:
  - attributed-no-source
  text: “A wise girl kisses but doesn't love, listens but doesn't believe, and leaves
    before she is left.”
- author: Martin Luther King Jr.
  tags:
  - hope
  - inspirational
  text: “Only in the darkness can you see the stars.”
- author: J.K. Rowling
  tags:
  - dumbledore
  text: “It matters not what someone is born, but what they grow to be.”
- author: James Baldwin
  tags:
  - love
  text: “Love does not begin and end the way we seem to think it does. Love is a battle,
    love is a war; love is a growing up.”

ejericicio4:
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Objetivo: el objetivo es que la autenticación pase los filtros, cumpla el objetivo y dé por exitosa la autenticación
class Objetivo {
    public void ejecutar(String correo, String contrasena) {
        System.out.println("Autenticación exitosa");
    }
}

// Filtro: interfaz para los filtros
interface Filtro {
    boolean ejecutar(String dato);
}

// Filtro: para validar el correo
class FiltroCorreo implements Filtro {
    @Override
    public boolean ejecutar(String correo) {
        if (correo == null || !correo.contains("@")) {
            System.out.println("Correo inválido: falta '@'");
            return false;
        }

        String[] partes = correo.split("@");
        if (partes[0].isEmpty()) {
            System.out.println("Correo inválido: falta texto antes de '@'");
            return false;
        }

        if (partes.length != 2){
            System.out.println("Correo inválido: falta texto después de '@'");
            return false;
        }
        else{
            String dominio = partes[1].toLowerCase();
            if (!dominio.equals("gmail.com") && !dominio.equals("hotmail.com")) {
                System.out.println("Correo inválido: dominio no permitido (solo gmail.com o hotmail.com)");
                return false;
            }
        }

        return true;
    }
}

// Filtro 1 para la contraseña: longitud mínima de 8 caracteres
class FiltroLongitud implements Filtro {
    @Override
    public boolean ejecutar(String contrasena) {
        if (contrasena.length() < 8) {
            System.out.println("Contraseña inválida: debe tener al menos 8 caracteres");
            return false;
        }
        return true;
    }
}

// Filtro 2 para la contraseña: debe contener al menos un número
class FiltroNumero implements Filtro {
    @Override
    public boolean ejecutar(String contrasena) {
        if (!contrasena.matches(".*\\d.*")) {  // . cualquier caracter; * cero o mas rep. del caracter anterior; \\d un digito numerico; 
            System.out.println("Contraseña inválida: debe contener al menos un número"); // .* cualquier cantidad de caracteres antes o despues del digito
            return false;
        }
        return true;
    }
}

// Filtro 3 para la contraseña: debe contener al menos una letra mayúscula
class FiltroMayuscula implements Filtro {
    @Override
    public boolean ejecutar(String contrasena) {
        if (!contrasena.matches(".*[A-Z].*")) {  // .* cualquier cantidad de caracteres antes o despues; [A-Z] cualquier letra mayusucla
            System.out.println("Contraseña inválida: debe contener al menos una letra mayúscula");  // .* cualquier cantidad de caracteres despues
            return false;
        }
        return true;
    }
}

// Cadena de filtros: lista con los filtros a aplicar
class CadenaFiltros {
    private final List<Filtro> filtros = new ArrayList<>();
    public void agregarFiltro(Filtro filtro) {
        filtros.add(filtro);
    }

    public boolean ejecutar(String dato) {
        for (Filtro filtro : filtros) {
            if (!filtro.ejecutar(dato)) {
                return false;
            }
        }
        return true;
    }
}

// GestorFiltros: gestiona la cadena de filtros y el objetivo
class GestorFiltros {
    private final CadenaFiltros cadenaFiltros = new CadenaFiltros();

    public void agregarFiltro(Filtro filtro) {
        cadenaFiltros.agregarFiltro(filtro);
    }

    public boolean peticionFiltros(String dato) {
        return cadenaFiltros.ejecutar(dato);
    }
}

// Cliente: solicita la validación
public class ServicioAutenticacion {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        GestorFiltros gestorCorreo = new GestorFiltros();
        GestorFiltros gestorContrasena = new GestorFiltros();
        Objetivo autenticacion = new Objetivo();

        // Agregar filtros a los gestores
        gestorCorreo.agregarFiltro(new FiltroCorreo());

        gestorContrasena.agregarFiltro(new FiltroLongitud());
        gestorContrasena.agregarFiltro(new FiltroNumero());
        gestorContrasena.agregarFiltro(new FiltroMayuscula());

        String correo, contrasena;

        // Validar el correo antes de pedir la contraseña
        do {
            System.out.print("Ingrese su correo: ");
            correo = scanner.nextLine();
        } while (!gestorCorreo.peticionFiltros(correo));

        // Validar la contraseña después de que el correo sea válido
        do {
            System.out.print("Ingrese su contraseña: ");
            contrasena = scanner.nextLine();
        } while (!gestorContrasena.peticionFiltros(contrasena));

        // Ejecutar el objetivo solo después de ambas validaciones
        autenticacion.ejecutar(correo, contrasena);

        scanner.close();
    }
}

